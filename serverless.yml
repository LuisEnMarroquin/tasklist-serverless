service: todolist-serverless
frameworkVersion: "3"

provider:
  name: aws
  region: us-east-2
  runtime: nodejs14.x
  memorySize: 128
  timeout: 10
  httpApi:
    cors: true
  environment:
    DYNAMO_TABLE_TODO: ${self:service}-${sls:stage}-todo
  iam:
    role:
      name: ${self:service}-${sls:stage}-role
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMO_TABLE_TODO}"

functions:
  indexList:
    handler: src/index.list
    events:
      - httpApi:
          path: /
          method: get
  todosCreate:
    handler: src/todos.create
    events:
      - httpApi:
          path: /todos
          method: post
  todosRead:
    handler: src/todos.read
    events:
      - httpApi:
          path: /todos/{id}
          method: get
  todosUpdate:
    handler: src/todos.update
    events:
      - httpApi:
          path: /todos/{id}
          method: put
  todosList:
    handler: src/todos.list
    events:
      - httpApi:
          path: /todos
          method: get

package:
  patterns:
    - "!*.md"
    - "!*.json"
    - "!*/**.ts"
    - "!.github/**"

resources:
  Resources:
    TodosDynamoTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain # Keep the table even if the stack is deleted
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMO_TABLE_TODO}
